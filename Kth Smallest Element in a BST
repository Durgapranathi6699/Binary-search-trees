class Solution {
    int res=0;
   int k=0;
    public int kthSmallest(TreeNode root, int k) {
         this.k=k;
        inorder(root);
        return res;
    }
    public void inorder(TreeNode root){
        //inorder gives elemnts in a sorted order here we are searching for kth smallest elemnt which is kth elemnt in a inorder(i.e when k reaches 0 we found our node)
        if(root==null)return;
        inorder(root.left);
       if(k--==1){
       res=root.val;
       return;
       }
        inorder(root.right);
    }
}
// public int kthSmallest(TreeNode root, int k) {
//         List<Integer> l=new ArrayList<>();
//         inorder(root,l);
//       return l.get(k-1);
//     }
//     public void inorder(TreeNode root, List<Integer> l){
//         if(root==null)return;
//         inorder(root.left,l);
//         l.add(root.val);
//         inorder(root.right,l);
//     }
